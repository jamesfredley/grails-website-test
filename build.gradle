buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core/" }
        maven {
            url = 'https://repo.gradle.org/gradle/libs-releases'
            description = 'Needed for Gradle Tooling API'
        }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:hibernate5:$gormVersion"
        classpath "org.grails.plugins:database-migration:$databaseMigrationVersion"
    }
}

plugins {
    id "groovy"
    id "com.github.erdi.webdriver-binaries" version "$webdriverBinariesPluginVersion"
    id "war"
    id "idea"
    id "com.bertramlabs.asset-pipeline" version "$assetPipelineVersion"
    id "application"
    id "eclipse"
}
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"

group = "website"

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

allprojects {
    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.seleniumhq.selenium') {
                details.useVersion(seleniumVersion)
            }
        }
    }
}


dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation("org.grails:grails-core")
    implementation("org.grails:grails-logging")
    implementation("org.grails:grails-plugin-databinding")
    implementation("org.grails:grails-plugin-i18n")
    implementation("org.grails:grails-plugin-interceptors")
    implementation("org.grails:grails-plugin-rest")
    implementation("org.grails:grails-plugin-services")
    implementation("org.grails:grails-plugin-url-mappings")
    implementation("org.grails:grails-web-boot")
    implementation("org.grails.plugins:gsp")
    implementation("org.grails.plugins:hibernate5")
    implementation("org.grails.plugins:scaffolding")
    implementation("org.springframework.boot:spring-boot-autoconfigure")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation("org.springframework.boot:spring-boot-starter-tomcat")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.sitemesh:grails-plugin-sitemesh3:$grailsSitemeshPluginVersion")
    implementation("org.grails.plugins:database-migration:$databaseMigrationVersion")

    console("org.grails:grails-console")
    runtimeOnly("com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion")
    runtimeOnly("com.h2database:h2")
    runtimeOnly("org.apache.tomcat:tomcat-jdbc")
    runtimeOnly("org.fusesource.jansi:jansi:$jansiVersion")
    profile ("org.grails.profiles:web")
    testImplementation("org.grails:grails-gorm-testing-support")
    testImplementation("org.grails:grails-web-testing-support")
    testImplementation("org.grails.plugins:geb")
    implementation "org.gebish:geb-spock:$gebVersion"
    testImplementation("org.seleniumhq.selenium:selenium-api:$seleniumVersion")
    testImplementation("org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion")
    testImplementation("org.seleniumhq.selenium:selenium-support:$seleniumVersion")
    testImplementation("org.spockframework:spock-core")
    testRuntimeOnly("org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion")
    testRuntimeOnly("org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion")
    testRuntimeOnly("org.seleniumhq.selenium:selenium-safari-driver:$seleniumVersion")
}

application {
    mainClass.set("website.Application")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
    systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
}

webdriverBinaries {
    chromedriver "$chromedriverVersion"
    geckodriver "$geckodriverVersion"
    edgedriver "$edgedriverVersion"
}